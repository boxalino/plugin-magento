<?php
namespace com\boxalino\dataintelligence\api\thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface BoxalinoDataIntelligenceIf {
  public function GetAuthentication(\com\boxalino\dataintelligence\api\thrift\AuthenticationRequest $authentication);
  public function UpdatePassword(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $newPassword);
  public function GetConfigurationVersion(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $versionType);
  public function SetDataSourcesConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersion, $dataSourcesConfigurationXML);
  public function GetFields(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration);
  public function CreateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId);
  public function UpdateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\Field $field);
  public function DeleteField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId);
  public function GetProcessTasks(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration);
  public function CreateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId);
  public function UpdateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTask $processTask);
  public function DeleteProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId);
  public function RunProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters $parameters);
  public function GetEmailCampaigns(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration);
  public function CreateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId);
  public function UpdateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\EmailCampaign $emailCampaign);
  public function DeleteEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId);
  public function GetChoices(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId);
  public function CreateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId);
  public function UpdateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\Choice $choice);
  public function DeleteChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId);
  public function GetChoiceVariants(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId);
  public function CreateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId);
  public function UpdateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\ChoiceVariant $choiceVariant);
  public function DeleteChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId);
  public function GetProcessStatus(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskExecutionId);
  public function GetConfigurationDifferences(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionSource, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionDestination);
  public function PublishConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration);
  public function CloneConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration);
}

class BoxalinoDataIntelligenceClient implements \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligenceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function GetAuthentication(\com\boxalino\dataintelligence\api\thrift\AuthenticationRequest $authentication)
  {
    $this->send_GetAuthentication($authentication);
    return $this->recv_GetAuthentication();
  }

  public function send_GetAuthentication(\com\boxalino\dataintelligence\api\thrift\AuthenticationRequest $authentication)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetAuthentication_args();
    $args->authentication = $authentication;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetAuthentication', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetAuthentication', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetAuthentication()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetAuthentication_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetAuthentication_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetAuthentication failed: unknown result");
  }

  public function UpdatePassword(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $newPassword)
  {
    $this->send_UpdatePassword($authentication, $newPassword);
    $this->recv_UpdatePassword();
  }

  public function send_UpdatePassword(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $newPassword)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdatePassword_args();
    $args->authentication = $authentication;
    $args->newPassword = $newPassword;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdatePassword', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdatePassword', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdatePassword()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdatePassword_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdatePassword_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetConfigurationVersion(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $versionType)
  {
    $this->send_GetConfigurationVersion($authentication, $versionType);
    return $this->recv_GetConfigurationVersion();
  }

  public function send_GetConfigurationVersion(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $versionType)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationVersion_args();
    $args->authentication = $authentication;
    $args->versionType = $versionType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetConfigurationVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetConfigurationVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetConfigurationVersion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetConfigurationVersion failed: unknown result");
  }

  public function SetDataSourcesConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersion, $dataSourcesConfigurationXML)
  {
    $this->send_SetDataSourcesConfiguration($authentication, $configurationVersion, $dataSourcesConfigurationXML);
    $this->recv_SetDataSourcesConfiguration();
  }

  public function send_SetDataSourcesConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersion, $dataSourcesConfigurationXML)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_SetDataSourcesConfiguration_args();
    $args->authentication = $authentication;
    $args->configurationVersion = $configurationVersion;
    $args->dataSourcesConfigurationXML = $dataSourcesConfigurationXML;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SetDataSourcesConfiguration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SetDataSourcesConfiguration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SetDataSourcesConfiguration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_SetDataSourcesConfiguration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_SetDataSourcesConfiguration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetFields(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $this->send_GetFields($authentication, $configuration);
    return $this->recv_GetFields();
  }

  public function send_GetFields(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetFields_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetFields', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetFields', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetFields()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetFields_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetFields_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetFields failed: unknown result");
  }

  public function CreateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId)
  {
    $this->send_CreateField($authentication, $configuration, $fieldId);
    $this->recv_CreateField();
  }

  public function send_CreateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateField_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->fieldId = $fieldId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateField', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateField', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CreateField()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateField_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateField_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function UpdateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\Field $field)
  {
    $this->send_UpdateField($authentication, $configuration, $field);
    $this->recv_UpdateField();
  }

  public function send_UpdateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\Field $field)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateField_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->field = $field;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateField', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateField', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateField()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateField_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateField_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function DeleteField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId)
  {
    $this->send_DeleteField($authentication, $configuration, $fieldId);
    $this->recv_DeleteField();
  }

  public function send_DeleteField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteField_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->fieldId = $fieldId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DeleteField', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DeleteField', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DeleteField()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteField_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteField_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetProcessTasks(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $this->send_GetProcessTasks($authentication, $configuration);
    return $this->recv_GetProcessTasks();
  }

  public function send_GetProcessTasks(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessTasks_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetProcessTasks', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetProcessTasks', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetProcessTasks()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessTasks_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessTasks_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetProcessTasks failed: unknown result");
  }

  public function CreateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId)
  {
    $this->send_CreateProcessTask($authentication, $configuration, $processTaskId);
    $this->recv_CreateProcessTask();
  }

  public function send_CreateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateProcessTask_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->processTaskId = $processTaskId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateProcessTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateProcessTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CreateProcessTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateProcessTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateProcessTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function UpdateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTask $processTask)
  {
    $this->send_UpdateProcessTask($authentication, $configuration, $processTask);
    $this->recv_UpdateProcessTask();
  }

  public function send_UpdateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTask $processTask)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateProcessTask_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->processTask = $processTask;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateProcessTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateProcessTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateProcessTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateProcessTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateProcessTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function DeleteProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId)
  {
    $this->send_DeleteProcessTask($authentication, $configuration, $processTaskId);
    $this->recv_DeleteProcessTask();
  }

  public function send_DeleteProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteProcessTask_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->processTaskId = $processTaskId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DeleteProcessTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DeleteProcessTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DeleteProcessTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteProcessTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteProcessTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function RunProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters $parameters)
  {
    $this->send_RunProcessTask($authentication, $configuration, $parameters);
    return $this->recv_RunProcessTask();
  }

  public function send_RunProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters $parameters)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_RunProcessTask_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->parameters = $parameters;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RunProcessTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RunProcessTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RunProcessTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_RunProcessTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_RunProcessTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("RunProcessTask failed: unknown result");
  }

  public function GetEmailCampaigns(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $this->send_GetEmailCampaigns($authentication, $configuration);
    return $this->recv_GetEmailCampaigns();
  }

  public function send_GetEmailCampaigns(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetEmailCampaigns_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetEmailCampaigns', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetEmailCampaigns', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetEmailCampaigns()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetEmailCampaigns_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetEmailCampaigns_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetEmailCampaigns failed: unknown result");
  }

  public function CreateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId)
  {
    $this->send_CreateEmailCampaign($authentication, $configuration, $emailCampaignId);
    $this->recv_CreateEmailCampaign();
  }

  public function send_CreateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateEmailCampaign_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->emailCampaignId = $emailCampaignId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateEmailCampaign', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateEmailCampaign', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CreateEmailCampaign()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateEmailCampaign_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateEmailCampaign_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function UpdateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\EmailCampaign $emailCampaign)
  {
    $this->send_UpdateEmailCampaign($authentication, $configuration, $emailCampaign);
    $this->recv_UpdateEmailCampaign();
  }

  public function send_UpdateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\EmailCampaign $emailCampaign)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateEmailCampaign_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->emailCampaign = $emailCampaign;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateEmailCampaign', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateEmailCampaign', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateEmailCampaign()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateEmailCampaign_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateEmailCampaign_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function DeleteEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId)
  {
    $this->send_DeleteEmailCampaign($authentication, $configuration, $emailCampaignId);
    $this->recv_DeleteEmailCampaign();
  }

  public function send_DeleteEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteEmailCampaign_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->emailCampaignId = $emailCampaignId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DeleteEmailCampaign', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DeleteEmailCampaign', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DeleteEmailCampaign()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteEmailCampaign_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteEmailCampaign_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetChoices(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId)
  {
    $this->send_GetChoices($authentication, $configuration, $choiceSourceId);
    return $this->recv_GetChoices();
  }

  public function send_GetChoices(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoices_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetChoices', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetChoices', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetChoices()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoices_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoices_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetChoices failed: unknown result");
  }

  public function CreateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $this->send_CreateChoice($authentication, $configuration, $choiceSourceId, $choiceId);
    $this->recv_CreateChoice();
  }

  public function send_CreateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoice_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceId = $choiceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateChoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateChoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CreateChoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function UpdateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\Choice $choice)
  {
    $this->send_UpdateChoice($authentication, $configuration, $choiceSourceId, $choice);
    $this->recv_UpdateChoice();
  }

  public function send_UpdateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\Choice $choice)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoice_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choice = $choice;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateChoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateChoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateChoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function DeleteChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $this->send_DeleteChoice($authentication, $configuration, $choiceSourceId, $choiceId);
    $this->recv_DeleteChoice();
  }

  public function send_DeleteChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoice_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceId = $choiceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DeleteChoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DeleteChoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DeleteChoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetChoiceVariants(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $this->send_GetChoiceVariants($authentication, $configuration, $choiceSourceId, $choiceId);
    return $this->recv_GetChoiceVariants();
  }

  public function send_GetChoiceVariants(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoiceVariants_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceId = $choiceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetChoiceVariants', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetChoiceVariants', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetChoiceVariants()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoiceVariants_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoiceVariants_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetChoiceVariants failed: unknown result");
  }

  public function CreateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId)
  {
    $this->send_CreateChoiceVariant($authentication, $configuration, $choiceSourceId, $choiceId, $choiceVariantId);
    $this->recv_CreateChoiceVariant();
  }

  public function send_CreateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoiceVariant_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceId = $choiceId;
    $args->choiceVariantId = $choiceVariantId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateChoiceVariant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateChoiceVariant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CreateChoiceVariant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoiceVariant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoiceVariant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function UpdateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\ChoiceVariant $choiceVariant)
  {
    $this->send_UpdateChoiceVariant($authentication, $configuration, $choiceSourceId, $choiceVariant);
    $this->recv_UpdateChoiceVariant();
  }

  public function send_UpdateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\ChoiceVariant $choiceVariant)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoiceVariant_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceVariant = $choiceVariant;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateChoiceVariant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateChoiceVariant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateChoiceVariant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoiceVariant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoiceVariant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function DeleteChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId)
  {
    $this->send_DeleteChoiceVariant($authentication, $configuration, $choiceSourceId, $choiceId, $choiceVariantId);
    $this->recv_DeleteChoiceVariant();
  }

  public function send_DeleteChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoiceVariant_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceId = $choiceId;
    $args->choiceVariantId = $choiceVariantId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DeleteChoiceVariant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DeleteChoiceVariant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DeleteChoiceVariant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoiceVariant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoiceVariant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetProcessStatus(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskExecutionId)
  {
    $this->send_GetProcessStatus($authentication, $configuration, $processTaskExecutionId);
    return $this->recv_GetProcessStatus();
  }

  public function send_GetProcessStatus(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskExecutionId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessStatus_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->processTaskExecutionId = $processTaskExecutionId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetProcessStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetProcessStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetProcessStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetProcessStatus failed: unknown result");
  }

  public function GetConfigurationDifferences(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionSource, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionDestination)
  {
    $this->send_GetConfigurationDifferences($authentication, $configurationVersionSource, $configurationVersionDestination);
    return $this->recv_GetConfigurationDifferences();
  }

  public function send_GetConfigurationDifferences(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionSource, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionDestination)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationDifferences_args();
    $args->authentication = $authentication;
    $args->configurationVersionSource = $configurationVersionSource;
    $args->configurationVersionDestination = $configurationVersionDestination;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetConfigurationDifferences', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetConfigurationDifferences', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetConfigurationDifferences()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationDifferences_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationDifferences_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetConfigurationDifferences failed: unknown result");
  }

  public function PublishConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $this->send_PublishConfiguration($authentication, $configuration);
    $this->recv_PublishConfiguration();
  }

  public function send_PublishConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_PublishConfiguration_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'PublishConfiguration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('PublishConfiguration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_PublishConfiguration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_PublishConfiguration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_PublishConfiguration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function CloneConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $this->send_CloneConfiguration($authentication, $configuration);
    $this->recv_CloneConfiguration();
  }

  public function send_CloneConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CloneConfiguration_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CloneConfiguration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CloneConfiguration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CloneConfiguration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CloneConfiguration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CloneConfiguration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class BoxalinoDataIntelligence_GetAuthentication_args {
  static $_TSPEC;

  public $authentication = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\AuthenticationRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetAuthentication_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\AuthenticationRequest();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetAuthentication_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetAuthentication_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetAuthentication_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetAuthentication_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdatePassword_args {
  static $_TSPEC;

  public $authentication = null;
  public $newPassword = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'newPassword',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['newPassword'])) {
        $this->newPassword = $vals['newPassword'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdatePassword_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->newPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdatePassword_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newPassword !== null) {
      $xfer += $output->writeFieldBegin('newPassword', TType::STRING, 2);
      $xfer += $output->writeString($this->newPassword);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdatePassword_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdatePassword_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdatePassword_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetConfigurationVersion_args {
  static $_TSPEC;

  public $authentication = null;
  public $versionType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'versionType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['versionType'])) {
        $this->versionType = $vals['versionType'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetConfigurationVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->versionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetConfigurationVersion_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->versionType !== null) {
      $xfer += $output->writeFieldBegin('versionType', TType::I32, 2);
      $xfer += $output->writeI32($this->versionType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetConfigurationVersion_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetConfigurationVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetConfigurationVersion_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_SetDataSourcesConfiguration_args {
  static $_TSPEC;

  public $authentication = null;
  public $configurationVersion = null;
  public $dataSourcesConfigurationXML = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configurationVersion',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'dataSourcesConfigurationXML',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configurationVersion'])) {
        $this->configurationVersion = $vals['configurationVersion'];
      }
      if (isset($vals['dataSourcesConfigurationXML'])) {
        $this->dataSourcesConfigurationXML = $vals['dataSourcesConfigurationXML'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_SetDataSourcesConfiguration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configurationVersion = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configurationVersion->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dataSourcesConfigurationXML);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_SetDataSourcesConfiguration_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configurationVersion !== null) {
      if (!is_object($this->configurationVersion)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configurationVersion', TType::STRUCT, 2);
      $xfer += $this->configurationVersion->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataSourcesConfigurationXML !== null) {
      $xfer += $output->writeFieldBegin('dataSourcesConfigurationXML', TType::STRING, 3);
      $xfer += $output->writeString($this->dataSourcesConfigurationXML);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_SetDataSourcesConfiguration_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_SetDataSourcesConfiguration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_SetDataSourcesConfiguration_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetFields_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetFields_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetFields_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetFields_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\Field',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetFields_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size84 = 0;
            $_ktype85 = 0;
            $_vtype86 = 0;
            $xfer += $input->readMapBegin($_ktype85, $_vtype86, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $key89 = '';
              $val90 = new \com\boxalino\dataintelligence\api\thrift\Field();
              $xfer += $input->readString($key89);
              $val90 = new \com\boxalino\dataintelligence\api\thrift\Field();
              $xfer += $val90->read($input);
              $this->success[$key89] = $val90;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetFields_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter91 => $viter92)
          {
            $xfer += $output->writeString($kiter91);
            $xfer += $viter92->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateField_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $fieldId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'fieldId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['fieldId'])) {
        $this->fieldId = $vals['fieldId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateField_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fieldId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateField_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fieldId !== null) {
      $xfer += $output->writeFieldBegin('fieldId', TType::STRING, 3);
      $xfer += $output->writeString($this->fieldId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateField_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateField_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateField_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateField_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $field = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'field',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Field',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['field'])) {
        $this->field = $vals['field'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateField_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->field = new \com\boxalino\dataintelligence\api\thrift\Field();
            $xfer += $this->field->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateField_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->field !== null) {
      if (!is_object($this->field)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('field', TType::STRUCT, 3);
      $xfer += $this->field->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateField_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateField_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateField_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteField_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $fieldId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'fieldId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['fieldId'])) {
        $this->fieldId = $vals['fieldId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteField_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fieldId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteField_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fieldId !== null) {
      $xfer += $output->writeFieldBegin('fieldId', TType::STRING, 3);
      $xfer += $output->writeString($this->fieldId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteField_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteField_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteField_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetProcessTasks_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetProcessTasks_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetProcessTasks_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetProcessTasks_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\ProcessTask',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetProcessTasks_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size93 = 0;
            $_ktype94 = 0;
            $_vtype95 = 0;
            $xfer += $input->readMapBegin($_ktype94, $_vtype95, $_size93);
            for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
            {
              $key98 = '';
              $val99 = new \com\boxalino\dataintelligence\api\thrift\ProcessTask();
              $xfer += $input->readString($key98);
              $val99 = new \com\boxalino\dataintelligence\api\thrift\ProcessTask();
              $xfer += $val99->read($input);
              $this->success[$key98] = $val99;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetProcessTasks_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter100 => $viter101)
          {
            $xfer += $output->writeString($kiter100);
            $xfer += $viter101->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateProcessTask_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $processTaskId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'processTaskId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['processTaskId'])) {
        $this->processTaskId = $vals['processTaskId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateProcessTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->processTaskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateProcessTask_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processTaskId !== null) {
      $xfer += $output->writeFieldBegin('processTaskId', TType::STRING, 3);
      $xfer += $output->writeString($this->processTaskId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateProcessTask_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateProcessTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateProcessTask_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateProcessTask_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $processTask = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'processTask',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ProcessTask',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['processTask'])) {
        $this->processTask = $vals['processTask'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateProcessTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->processTask = new \com\boxalino\dataintelligence\api\thrift\ProcessTask();
            $xfer += $this->processTask->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateProcessTask_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processTask !== null) {
      if (!is_object($this->processTask)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('processTask', TType::STRUCT, 3);
      $xfer += $this->processTask->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateProcessTask_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateProcessTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateProcessTask_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteProcessTask_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $processTaskId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'processTaskId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['processTaskId'])) {
        $this->processTaskId = $vals['processTaskId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteProcessTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->processTaskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteProcessTask_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processTaskId !== null) {
      $xfer += $output->writeFieldBegin('processTaskId', TType::STRING, 3);
      $xfer += $output->writeString($this->processTaskId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteProcessTask_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteProcessTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteProcessTask_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_RunProcessTask_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $parameters = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'parameters',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['parameters'])) {
        $this->parameters = $vals['parameters'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_RunProcessTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->parameters = new \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters();
            $xfer += $this->parameters->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_RunProcessTask_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameters !== null) {
      if (!is_object($this->parameters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameters', TType::STRUCT, 3);
      $xfer += $this->parameters->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_RunProcessTask_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_RunProcessTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_RunProcessTask_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetEmailCampaigns_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetEmailCampaigns_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetEmailCampaigns_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetEmailCampaigns_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\EmailCampaign',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetEmailCampaigns_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size102 = 0;
            $_ktype103 = 0;
            $_vtype104 = 0;
            $xfer += $input->readMapBegin($_ktype103, $_vtype104, $_size102);
            for ($_i106 = 0; $_i106 < $_size102; ++$_i106)
            {
              $key107 = '';
              $val108 = new \com\boxalino\dataintelligence\api\thrift\EmailCampaign();
              $xfer += $input->readString($key107);
              $val108 = new \com\boxalino\dataintelligence\api\thrift\EmailCampaign();
              $xfer += $val108->read($input);
              $this->success[$key107] = $val108;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetEmailCampaigns_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter109 => $viter110)
          {
            $xfer += $output->writeString($kiter109);
            $xfer += $viter110->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateEmailCampaign_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $emailCampaignId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'emailCampaignId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['emailCampaignId'])) {
        $this->emailCampaignId = $vals['emailCampaignId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateEmailCampaign_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailCampaignId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateEmailCampaign_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailCampaignId !== null) {
      $xfer += $output->writeFieldBegin('emailCampaignId', TType::STRING, 3);
      $xfer += $output->writeString($this->emailCampaignId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateEmailCampaign_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateEmailCampaign_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateEmailCampaign_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateEmailCampaign_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $emailCampaign = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'emailCampaign',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\EmailCampaign',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['emailCampaign'])) {
        $this->emailCampaign = $vals['emailCampaign'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateEmailCampaign_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->emailCampaign = new \com\boxalino\dataintelligence\api\thrift\EmailCampaign();
            $xfer += $this->emailCampaign->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateEmailCampaign_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailCampaign !== null) {
      if (!is_object($this->emailCampaign)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('emailCampaign', TType::STRUCT, 3);
      $xfer += $this->emailCampaign->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateEmailCampaign_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateEmailCampaign_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateEmailCampaign_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteEmailCampaign_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $emailCampaignId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'emailCampaignId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['emailCampaignId'])) {
        $this->emailCampaignId = $vals['emailCampaignId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteEmailCampaign_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailCampaignId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteEmailCampaign_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailCampaignId !== null) {
      $xfer += $output->writeFieldBegin('emailCampaignId', TType::STRING, 3);
      $xfer += $output->writeString($this->emailCampaignId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteEmailCampaign_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteEmailCampaign_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteEmailCampaign_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetChoices_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $choiceSourceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetChoices_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetChoices_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetChoices_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\Choice',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetChoices_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size111 = 0;
            $_ktype112 = 0;
            $_vtype113 = 0;
            $xfer += $input->readMapBegin($_ktype112, $_vtype113, $_size111);
            for ($_i115 = 0; $_i115 < $_size111; ++$_i115)
            {
              $key116 = '';
              $val117 = new \com\boxalino\dataintelligence\api\thrift\Choice();
              $xfer += $input->readString($key116);
              $val117 = new \com\boxalino\dataintelligence\api\thrift\Choice();
              $xfer += $val117->read($input);
              $this->success[$key116] = $val117;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetChoices_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter118 => $viter119)
          {
            $xfer += $output->writeString($kiter118);
            $xfer += $viter119->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateChoice_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $choiceSourceId = null;
  public $choiceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateChoice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateChoice_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 4);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateChoice_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateChoice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateChoice_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateChoice_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $choiceSourceId = null;
  public $choice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choice',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Choice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choice'])) {
        $this->choice = $vals['choice'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateChoice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->choice = new \com\boxalino\dataintelligence\api\thrift\Choice();
            $xfer += $this->choice->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateChoice_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choice !== null) {
      if (!is_object($this->choice)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('choice', TType::STRUCT, 4);
      $xfer += $this->choice->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateChoice_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateChoice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateChoice_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteChoice_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $choiceSourceId = null;
  public $choiceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteChoice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteChoice_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 4);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteChoice_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteChoice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteChoice_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetChoiceVariants_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $choiceSourceId = null;
  public $choiceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetChoiceVariants_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetChoiceVariants_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 4);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetChoiceVariants_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\ChoiceVariant',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetChoiceVariants_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size120 = 0;
            $_ktype121 = 0;
            $_vtype122 = 0;
            $xfer += $input->readMapBegin($_ktype121, $_vtype122, $_size120);
            for ($_i124 = 0; $_i124 < $_size120; ++$_i124)
            {
              $key125 = '';
              $val126 = new \com\boxalino\dataintelligence\api\thrift\ChoiceVariant();
              $xfer += $input->readString($key125);
              $val126 = new \com\boxalino\dataintelligence\api\thrift\ChoiceVariant();
              $xfer += $val126->read($input);
              $this->success[$key125] = $val126;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetChoiceVariants_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter127 => $viter128)
          {
            $xfer += $output->writeString($kiter127);
            $xfer += $viter128->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateChoiceVariant_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $choiceSourceId = null;
  public $choiceId = null;
  public $choiceVariantId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'choiceVariantId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
      if (isset($vals['choiceVariantId'])) {
        $this->choiceVariantId = $vals['choiceVariantId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateChoiceVariant_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceVariantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateChoiceVariant_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 4);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceVariantId !== null) {
      $xfer += $output->writeFieldBegin('choiceVariantId', TType::STRING, 5);
      $xfer += $output->writeString($this->choiceVariantId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateChoiceVariant_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateChoiceVariant_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateChoiceVariant_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateChoiceVariant_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $choiceSourceId = null;
  public $choiceVariant = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceVariant',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ChoiceVariant',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceVariant'])) {
        $this->choiceVariant = $vals['choiceVariant'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateChoiceVariant_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->choiceVariant = new \com\boxalino\dataintelligence\api\thrift\ChoiceVariant();
            $xfer += $this->choiceVariant->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateChoiceVariant_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceVariant !== null) {
      if (!is_object($this->choiceVariant)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('choiceVariant', TType::STRUCT, 4);
      $xfer += $this->choiceVariant->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateChoiceVariant_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateChoiceVariant_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateChoiceVariant_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteChoiceVariant_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $choiceSourceId = null;
  public $choiceId = null;
  public $choiceVariantId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'choiceVariantId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
      if (isset($vals['choiceVariantId'])) {
        $this->choiceVariantId = $vals['choiceVariantId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteChoiceVariant_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceVariantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteChoiceVariant_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 4);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceVariantId !== null) {
      $xfer += $output->writeFieldBegin('choiceVariantId', TType::STRING, 5);
      $xfer += $output->writeString($this->choiceVariantId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteChoiceVariant_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteChoiceVariant_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteChoiceVariant_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetProcessStatus_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;
  public $processTaskExecutionId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'processTaskExecutionId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['processTaskExecutionId'])) {
        $this->processTaskExecutionId = $vals['processTaskExecutionId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetProcessStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->processTaskExecutionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetProcessStatus_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processTaskExecutionId !== null) {
      $xfer += $output->writeFieldBegin('processTaskExecutionId', TType::STRING, 3);
      $xfer += $output->writeString($this->processTaskExecutionId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetProcessStatus_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionStatus',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetProcessStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionStatus();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetProcessStatus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetConfigurationDifferences_args {
  static $_TSPEC;

  public $authentication = null;
  public $configurationVersionSource = null;
  public $configurationVersionDestination = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configurationVersionSource',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'configurationVersionDestination',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configurationVersionSource'])) {
        $this->configurationVersionSource = $vals['configurationVersionSource'];
      }
      if (isset($vals['configurationVersionDestination'])) {
        $this->configurationVersionDestination = $vals['configurationVersionDestination'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetConfigurationDifferences_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configurationVersionSource = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configurationVersionSource->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->configurationVersionDestination = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configurationVersionDestination->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetConfigurationDifferences_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configurationVersionSource !== null) {
      if (!is_object($this->configurationVersionSource)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configurationVersionSource', TType::STRUCT, 2);
      $xfer += $this->configurationVersionSource->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configurationVersionDestination !== null) {
      if (!is_object($this->configurationVersionDestination)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configurationVersionDestination', TType::STRUCT, 3);
      $xfer += $this->configurationVersionDestination->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetConfigurationDifferences_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationDifference',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetConfigurationDifferences_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size129 = 0;
            $_etype132 = 0;
            $xfer += $input->readListBegin($_etype132, $_size129);
            for ($_i133 = 0; $_i133 < $_size129; ++$_i133)
            {
              $elem134 = null;
              $elem134 = new \com\boxalino\dataintelligence\api\thrift\ConfigurationDifference();
              $xfer += $elem134->read($input);
              $this->success []= $elem134;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetConfigurationDifferences_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter135)
          {
            $xfer += $iter135->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_PublishConfiguration_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_PublishConfiguration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_PublishConfiguration_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_PublishConfiguration_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_PublishConfiguration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_PublishConfiguration_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CloneConfiguration_args {
  static $_TSPEC;

  public $authentication = null;
  public $configuration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CloneConfiguration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CloneConfiguration_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CloneConfiguration_result {
  static $_TSPEC;

  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CloneConfiguration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CloneConfiguration_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligenceProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_GetAuthentication($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetAuthentication_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetAuthentication_result();
    try {
      $result->success = $this->handler_->GetAuthentication($args->authentication);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'GetAuthentication', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('GetAuthentication', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_UpdatePassword($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdatePassword_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdatePassword_result();
    try {
      $this->handler_->UpdatePassword($args->authentication, $args->newPassword);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'UpdatePassword', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('UpdatePassword', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_GetConfigurationVersion($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationVersion_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationVersion_result();
    try {
      $result->success = $this->handler_->GetConfigurationVersion($args->authentication, $args->versionType);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'GetConfigurationVersion', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('GetConfigurationVersion', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_SetDataSourcesConfiguration($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_SetDataSourcesConfiguration_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_SetDataSourcesConfiguration_result();
    try {
      $this->handler_->SetDataSourcesConfiguration($args->authentication, $args->configurationVersion, $args->dataSourcesConfigurationXML);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'SetDataSourcesConfiguration', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('SetDataSourcesConfiguration', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_GetFields($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetFields_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetFields_result();
    try {
      $result->success = $this->handler_->GetFields($args->authentication, $args->configuration);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'GetFields', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('GetFields', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_CreateField($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateField_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateField_result();
    try {
      $this->handler_->CreateField($args->authentication, $args->configuration, $args->fieldId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'CreateField', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('CreateField', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_UpdateField($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateField_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateField_result();
    try {
      $this->handler_->UpdateField($args->authentication, $args->configuration, $args->field);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'UpdateField', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('UpdateField', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_DeleteField($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteField_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteField_result();
    try {
      $this->handler_->DeleteField($args->authentication, $args->configuration, $args->fieldId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'DeleteField', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('DeleteField', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_GetProcessTasks($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessTasks_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessTasks_result();
    try {
      $result->success = $this->handler_->GetProcessTasks($args->authentication, $args->configuration);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'GetProcessTasks', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('GetProcessTasks', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_CreateProcessTask($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateProcessTask_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateProcessTask_result();
    try {
      $this->handler_->CreateProcessTask($args->authentication, $args->configuration, $args->processTaskId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'CreateProcessTask', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('CreateProcessTask', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_UpdateProcessTask($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateProcessTask_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateProcessTask_result();
    try {
      $this->handler_->UpdateProcessTask($args->authentication, $args->configuration, $args->processTask);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'UpdateProcessTask', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('UpdateProcessTask', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_DeleteProcessTask($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteProcessTask_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteProcessTask_result();
    try {
      $this->handler_->DeleteProcessTask($args->authentication, $args->configuration, $args->processTaskId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'DeleteProcessTask', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('DeleteProcessTask', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_RunProcessTask($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_RunProcessTask_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_RunProcessTask_result();
    try {
      $result->success = $this->handler_->RunProcessTask($args->authentication, $args->configuration, $args->parameters);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'RunProcessTask', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('RunProcessTask', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_GetEmailCampaigns($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetEmailCampaigns_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetEmailCampaigns_result();
    try {
      $result->success = $this->handler_->GetEmailCampaigns($args->authentication, $args->configuration);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'GetEmailCampaigns', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('GetEmailCampaigns', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_CreateEmailCampaign($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateEmailCampaign_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateEmailCampaign_result();
    try {
      $this->handler_->CreateEmailCampaign($args->authentication, $args->configuration, $args->emailCampaignId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'CreateEmailCampaign', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('CreateEmailCampaign', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_UpdateEmailCampaign($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateEmailCampaign_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateEmailCampaign_result();
    try {
      $this->handler_->UpdateEmailCampaign($args->authentication, $args->configuration, $args->emailCampaign);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'UpdateEmailCampaign', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('UpdateEmailCampaign', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_DeleteEmailCampaign($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteEmailCampaign_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteEmailCampaign_result();
    try {
      $this->handler_->DeleteEmailCampaign($args->authentication, $args->configuration, $args->emailCampaignId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'DeleteEmailCampaign', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('DeleteEmailCampaign', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_GetChoices($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoices_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoices_result();
    try {
      $result->success = $this->handler_->GetChoices($args->authentication, $args->configuration, $args->choiceSourceId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'GetChoices', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('GetChoices', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_CreateChoice($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoice_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoice_result();
    try {
      $this->handler_->CreateChoice($args->authentication, $args->configuration, $args->choiceSourceId, $args->choiceId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'CreateChoice', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('CreateChoice', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_UpdateChoice($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoice_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoice_result();
    try {
      $this->handler_->UpdateChoice($args->authentication, $args->configuration, $args->choiceSourceId, $args->choice);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'UpdateChoice', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('UpdateChoice', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_DeleteChoice($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoice_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoice_result();
    try {
      $this->handler_->DeleteChoice($args->authentication, $args->configuration, $args->choiceSourceId, $args->choiceId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'DeleteChoice', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('DeleteChoice', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_GetChoiceVariants($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoiceVariants_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoiceVariants_result();
    try {
      $result->success = $this->handler_->GetChoiceVariants($args->authentication, $args->configuration, $args->choiceSourceId, $args->choiceId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'GetChoiceVariants', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('GetChoiceVariants', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_CreateChoiceVariant($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoiceVariant_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoiceVariant_result();
    try {
      $this->handler_->CreateChoiceVariant($args->authentication, $args->configuration, $args->choiceSourceId, $args->choiceId, $args->choiceVariantId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'CreateChoiceVariant', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('CreateChoiceVariant', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_UpdateChoiceVariant($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoiceVariant_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoiceVariant_result();
    try {
      $this->handler_->UpdateChoiceVariant($args->authentication, $args->configuration, $args->choiceSourceId, $args->choiceVariant);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'UpdateChoiceVariant', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('UpdateChoiceVariant', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_DeleteChoiceVariant($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoiceVariant_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoiceVariant_result();
    try {
      $this->handler_->DeleteChoiceVariant($args->authentication, $args->configuration, $args->choiceSourceId, $args->choiceId, $args->choiceVariantId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'DeleteChoiceVariant', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('DeleteChoiceVariant', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_GetProcessStatus($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessStatus_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessStatus_result();
    try {
      $result->success = $this->handler_->GetProcessStatus($args->authentication, $args->configuration, $args->processTaskExecutionId);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'GetProcessStatus', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('GetProcessStatus', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_GetConfigurationDifferences($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationDifferences_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationDifferences_result();
    try {
      $result->success = $this->handler_->GetConfigurationDifferences($args->authentication, $args->configurationVersionSource, $args->configurationVersionDestination);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'GetConfigurationDifferences', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('GetConfigurationDifferences', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_PublishConfiguration($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_PublishConfiguration_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_PublishConfiguration_result();
    try {
      $this->handler_->PublishConfiguration($args->authentication, $args->configuration);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'PublishConfiguration', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('PublishConfiguration', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_CloneConfiguration($seqid, $input, $output) {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CloneConfiguration_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CloneConfiguration_result();
    try {
      $this->handler_->CloneConfiguration($args->authentication, $args->configuration);
    } catch (\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException $e) {
      $result->e = $e;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'CloneConfiguration', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('CloneConfiguration', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

