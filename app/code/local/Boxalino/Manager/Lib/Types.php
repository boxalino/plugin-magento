<?php
namespace com\boxalino\dataintelligence\api\thrift;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class DataIntelligenceServiceExceptionNumber {
  const GENERAL_EXCEPTION = 1;
  const INVALID_CREDENTIALS = 2;
  const BLOCKED_USER = 3;
  const BLOCKED_ACCOUNT = 4;
  const INVALID_AUTHENTICATION_TOKEN = 5;
  const INVALID_NEW_PASSWORD = 6;
  const INVALID_CONFIGURATION_VERSION = 7;
  const INVALID_data = 8;
  const source = 8;
  const NON_EXISTING_CONTENT_ID = 9;
  const ALREADY_EXISTING_CONTENT_ID = 10;
  const INVALID_CONTENT_ID = 11;
  const INVALID_CONTENT = 12;
  const INVALID_LANGUAGE = 13;
  static public $__names = array(
    1 => 'GENERAL_EXCEPTION',
    2 => 'INVALID_CREDENTIALS',
    3 => 'BLOCKED_USER',
    4 => 'BLOCKED_ACCOUNT',
    5 => 'INVALID_AUTHENTICATION_TOKEN',
    6 => 'INVALID_NEW_PASSWORD',
    7 => 'INVALID_CONFIGURATION_VERSION',
    8 => 'INVALID_data',
    8 => 'source',
    9 => 'NON_EXISTING_CONTENT_ID',
    10 => 'ALREADY_EXISTING_CONTENT_ID',
    11 => 'INVALID_CONTENT_ID',
    12 => 'INVALID_CONTENT',
    13 => 'INVALID_LANGUAGE',
  );
}

final class ConfigurationVersionType {
  const CURRENT_DEVELOPMENT_VERSION = 1;
  const CURRENT_PRODUCTION_VERSION = 2;
  static public $__names = array(
    1 => 'CURRENT_DEVELOPMENT_VERSION',
    2 => 'CURRENT_PRODUCTION_VERSION',
  );
}

final class Language {
  const GERMAN = 1;
  const FRENCH = 2;
  const ENGLISH = 3;
  const ITALIAN = 4;
  const SPANISH = 5;
  const DUTCH = 6;
  const PORTUGUESE = 7;
  const SWIDISH = 8;
  const ARABIC = 9;
  const RUSSIAN = 10;
  const JAPANESE = 11;
  const KOREAN = 12;
  const TURKISH = 13;
  const VIETNAMESE = 14;
  const POLISH = 15;
  const UKRAINIAN = 16;
  const CHINESE_MANDARIN = 17;
  const OTHER = 100;
  static public $__names = array(
    1 => 'GERMAN',
    2 => 'FRENCH',
    3 => 'ENGLISH',
    4 => 'ITALIAN',
    5 => 'SPANISH',
    6 => 'DUTCH',
    7 => 'PORTUGUESE',
    8 => 'SWIDISH',
    9 => 'ARABIC',
    10 => 'RUSSIAN',
    11 => 'JAPANESE',
    12 => 'KOREAN',
    13 => 'TURKISH',
    14 => 'VIETNAMESE',
    15 => 'POLISH',
    16 => 'UKRAINIAN',
    17 => 'CHINESE_MANDARIN',
    100 => 'OTHER',
  );
}

final class ProcessTaskExecutionStatusType {
  const WAITING = 1;
  const STARTED = 2;
  const FINISHED_SUCCESS = 3;
  const FINISHED_WITH_WARNINGS = 4;
  const FAILED = 5;
  const ABORTED = 6;
  static public $__names = array(
    1 => 'WAITING',
    2 => 'STARTED',
    3 => 'FINISHED_SUCCESS',
    4 => 'FINISHED_WITH_WARNINGS',
    5 => 'FAILED',
    6 => 'ABORTED',
  );
}

class DataIntelligenceServiceException extends TException {
  static $_TSPEC;

  public $exceptionNumber = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'exceptionNumber',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['exceptionNumber'])) {
        $this->exceptionNumber = $vals['exceptionNumber'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'DataIntelligenceServiceException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->exceptionNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DataIntelligenceServiceException');
    if ($this->exceptionNumber !== null) {
      $xfer += $output->writeFieldBegin('exceptionNumber', TType::I32, 1);
      $xfer += $output->writeI32($this->exceptionNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AuthenticationRequest {
  static $_TSPEC;

  public $account = null;
  public $username = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'account',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['account'])) {
        $this->account = $vals['account'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
    }
  }

  public function getName() {
    return 'AuthenticationRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthenticationRequest');
    if ($this->account !== null) {
      $xfer += $output->writeFieldBegin('account', TType::STRING, 1);
      $xfer += $output->writeString($this->account);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Authentication {
  static $_TSPEC;

  public $authenticationToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authenticationToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authenticationToken'])) {
        $this->authenticationToken = $vals['authenticationToken'];
      }
    }
  }

  public function getName() {
    return 'Authentication';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authenticationToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Authentication');
    if ($this->authenticationToken !== null) {
      $xfer += $output->writeFieldBegin('authenticationToken', TType::STRING, 1);
      $xfer += $output->writeString($this->authenticationToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConfigurationVersion {
  static $_TSPEC;

  public $configurationVersionNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'configurationVersionNumber',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['configurationVersionNumber'])) {
        $this->configurationVersionNumber = $vals['configurationVersionNumber'];
      }
    }
  }

  public function getName() {
    return 'ConfigurationVersion';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->configurationVersionNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConfigurationVersion');
    if ($this->configurationVersionNumber !== null) {
      $xfer += $output->writeFieldBegin('configurationVersionNumber', TType::I16, 1);
      $xfer += $output->writeI16($this->configurationVersionNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConfigurationDifference {
  static $_TSPEC;

  public $contentType = null;
  public $contentId = null;
  public $parameterName = null;
  public $contentSource = null;
  public $contentDestination = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'contentType',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contentId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parameterName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'contentSource',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'contentDestination',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['contentType'])) {
        $this->contentType = $vals['contentType'];
      }
      if (isset($vals['contentId'])) {
        $this->contentId = $vals['contentId'];
      }
      if (isset($vals['parameterName'])) {
        $this->parameterName = $vals['parameterName'];
      }
      if (isset($vals['contentSource'])) {
        $this->contentSource = $vals['contentSource'];
      }
      if (isset($vals['contentDestination'])) {
        $this->contentDestination = $vals['contentDestination'];
      }
    }
  }

  public function getName() {
    return 'ConfigurationDifference';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parameterName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentSource);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentDestination);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConfigurationDifference');
    if ($this->contentType !== null) {
      $xfer += $output->writeFieldBegin('contentType', TType::STRING, 1);
      $xfer += $output->writeString($this->contentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentId !== null) {
      $xfer += $output->writeFieldBegin('contentId', TType::STRING, 2);
      $xfer += $output->writeString($this->contentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterName !== null) {
      $xfer += $output->writeFieldBegin('parameterName', TType::STRING, 3);
      $xfer += $output->writeString($this->parameterName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentSource !== null) {
      $xfer += $output->writeFieldBegin('contentSource', TType::STRING, 4);
      $xfer += $output->writeString($this->contentSource);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentDestination !== null) {
      $xfer += $output->writeFieldBegin('contentDestination', TType::STRING, 5);
      $xfer += $output->writeString($this->contentDestination);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Field {
  static $_TSPEC;

  public $fieldId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fieldId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fieldId'])) {
        $this->fieldId = $vals['fieldId'];
      }
    }
  }

  public function getName() {
    return 'Field';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fieldId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Field');
    if ($this->fieldId !== null) {
      $xfer += $output->writeFieldBegin('fieldId', TType::STRING, 1);
      $xfer += $output->writeString($this->fieldId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProcessTask {
  static $_TSPEC;

  public $processTaskId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'processTaskId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['processTaskId'])) {
        $this->processTaskId = $vals['processTaskId'];
      }
    }
  }

  public function getName() {
    return 'ProcessTask';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->processTaskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProcessTask');
    if ($this->processTaskId !== null) {
      $xfer += $output->writeFieldBegin('processTaskId', TType::STRING, 1);
      $xfer += $output->writeString($this->processTaskId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmailCampaign {
  static $_TSPEC;

  public $emailCampaignId = null;
  public $cmpid = null;
  public $dateTime = null;
  public $baseUrl = null;
  public $subject = null;
  public $firstSentence = null;
  public $legals = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'emailCampaignId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cmpid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dateTime',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'baseUrl',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'subject',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'firstSentence',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'legals',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['emailCampaignId'])) {
        $this->emailCampaignId = $vals['emailCampaignId'];
      }
      if (isset($vals['cmpid'])) {
        $this->cmpid = $vals['cmpid'];
      }
      if (isset($vals['dateTime'])) {
        $this->dateTime = $vals['dateTime'];
      }
      if (isset($vals['baseUrl'])) {
        $this->baseUrl = $vals['baseUrl'];
      }
      if (isset($vals['subject'])) {
        $this->subject = $vals['subject'];
      }
      if (isset($vals['firstSentence'])) {
        $this->firstSentence = $vals['firstSentence'];
      }
      if (isset($vals['legals'])) {
        $this->legals = $vals['legals'];
      }
    }
  }

  public function getName() {
    return 'EmailCampaign';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailCampaignId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cmpid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->baseUrl = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = '';
              $xfer += $input->readI32($key5);
              $xfer += $input->readString($val6);
              $this->baseUrl[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->subject = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = 0;
              $val13 = '';
              $xfer += $input->readI32($key12);
              $xfer += $input->readString($val13);
              $this->subject[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->firstSentence = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = 0;
              $val20 = '';
              $xfer += $input->readI32($key19);
              $xfer += $input->readString($val20);
              $this->firstSentence[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->legals = array();
            $_size21 = 0;
            $_ktype22 = 0;
            $_vtype23 = 0;
            $xfer += $input->readMapBegin($_ktype22, $_vtype23, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $key26 = 0;
              $val27 = '';
              $xfer += $input->readI32($key26);
              $xfer += $input->readString($val27);
              $this->legals[$key26] = $val27;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmailCampaign');
    if ($this->emailCampaignId !== null) {
      $xfer += $output->writeFieldBegin('emailCampaignId', TType::STRING, 1);
      $xfer += $output->writeString($this->emailCampaignId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cmpid !== null) {
      $xfer += $output->writeFieldBegin('cmpid', TType::STRING, 2);
      $xfer += $output->writeString($this->cmpid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTime !== null) {
      $xfer += $output->writeFieldBegin('dateTime', TType::STRING, 3);
      $xfer += $output->writeString($this->dateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->baseUrl !== null) {
      if (!is_array($this->baseUrl)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('baseUrl', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->baseUrl));
        {
          foreach ($this->baseUrl as $kiter28 => $viter29)
          {
            $xfer += $output->writeI32($kiter28);
            $xfer += $output->writeString($viter29);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subject !== null) {
      if (!is_array($this->subject)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subject', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->subject));
        {
          foreach ($this->subject as $kiter30 => $viter31)
          {
            $xfer += $output->writeI32($kiter30);
            $xfer += $output->writeString($viter31);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firstSentence !== null) {
      if (!is_array($this->firstSentence)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('firstSentence', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->firstSentence));
        {
          foreach ($this->firstSentence as $kiter32 => $viter33)
          {
            $xfer += $output->writeI32($kiter32);
            $xfer += $output->writeString($viter33);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->legals !== null) {
      if (!is_array($this->legals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('legals', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->legals));
        {
          foreach ($this->legals as $kiter34 => $viter35)
          {
            $xfer += $output->writeI32($kiter34);
            $xfer += $output->writeString($viter35);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Choice {
  static $_TSPEC;

  public $choiceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
    }
  }

  public function getName() {
    return 'Choice';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Choice');
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 1);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChoiceVariant {
  static $_TSPEC;

  public $choiceVariantId = null;
  public $choiceId = null;
  public $tags = null;
  public $simpleParameters = null;
  public $localizedParemeters = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'choiceVariantId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tags',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'simpleParameters',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        5 => array(
          'var' => 'localizedParemeters',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::MAP,
            'elem' => array(
              'type' => TType::MAP,
              'ktype' => TType::I32,
              'vtype' => TType::STRING,
              'key' => array(
                'type' => TType::I32,
              ),
              'val' => array(
                'type' => TType::STRING,
                ),
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['choiceVariantId'])) {
        $this->choiceVariantId = $vals['choiceVariantId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
      if (isset($vals['tags'])) {
        $this->tags = $vals['tags'];
      }
      if (isset($vals['simpleParameters'])) {
        $this->simpleParameters = $vals['simpleParameters'];
      }
      if (isset($vals['localizedParemeters'])) {
        $this->localizedParemeters = $vals['localizedParemeters'];
      }
    }
  }

  public function getName() {
    return 'ChoiceVariant';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceVariantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->tags = array();
            $_size36 = 0;
            $_etype39 = 0;
            $xfer += $input->readListBegin($_etype39, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $elem41 = null;
              $xfer += $input->readString($elem41);
              $this->tags []= $elem41;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->simpleParameters = array();
            $_size42 = 0;
            $_ktype43 = 0;
            $_vtype44 = 0;
            $xfer += $input->readMapBegin($_ktype43, $_vtype44, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $key47 = '';
              $val48 = array();
              $xfer += $input->readString($key47);
              $val48 = array();
              $_size49 = 0;
              $_etype52 = 0;
              $xfer += $input->readListBegin($_etype52, $_size49);
              for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
              {
                $elem54 = null;
                $xfer += $input->readString($elem54);
                $val48 []= $elem54;
              }
              $xfer += $input->readListEnd();
              $this->simpleParameters[$key47] = $val48;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->localizedParemeters = array();
            $_size55 = 0;
            $_ktype56 = 0;
            $_vtype57 = 0;
            $xfer += $input->readMapBegin($_ktype56, $_vtype57, $_size55);
            for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
            {
              $key60 = '';
              $val61 = array();
              $xfer += $input->readString($key60);
              $val61 = array();
              $_size62 = 0;
              $_etype65 = 0;
              $xfer += $input->readListBegin($_etype65, $_size62);
              for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
              {
                $elem67 = null;
                $elem67 = array();
                $_size68 = 0;
                $_ktype69 = 0;
                $_vtype70 = 0;
                $xfer += $input->readMapBegin($_ktype69, $_vtype70, $_size68);
                for ($_i72 = 0; $_i72 < $_size68; ++$_i72)
                {
                  $key73 = 0;
                  $val74 = '';
                  $xfer += $input->readI32($key73);
                  $xfer += $input->readString($val74);
                  $elem67[$key73] = $val74;
                }
                $xfer += $input->readMapEnd();
                $val61 []= $elem67;
              }
              $xfer += $input->readListEnd();
              $this->localizedParemeters[$key60] = $val61;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChoiceVariant');
    if ($this->choiceVariantId !== null) {
      $xfer += $output->writeFieldBegin('choiceVariantId', TType::STRING, 1);
      $xfer += $output->writeString($this->choiceVariantId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 2);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tags !== null) {
      if (!is_array($this->tags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tags', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->tags));
        {
          foreach ($this->tags as $iter75)
          {
            $xfer += $output->writeString($iter75);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->simpleParameters !== null) {
      if (!is_array($this->simpleParameters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('simpleParameters', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->simpleParameters));
        {
          foreach ($this->simpleParameters as $kiter76 => $viter77)
          {
            $xfer += $output->writeString($kiter76);
            {
              $output->writeListBegin(TType::STRING, count($viter77));
              {
                foreach ($viter77 as $iter78)
                {
                  $xfer += $output->writeString($iter78);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->localizedParemeters !== null) {
      if (!is_array($this->localizedParemeters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('localizedParemeters', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->localizedParemeters));
        {
          foreach ($this->localizedParemeters as $kiter79 => $viter80)
          {
            $xfer += $output->writeString($kiter79);
            {
              $output->writeListBegin(TType::MAP, count($viter80));
              {
                foreach ($viter80 as $iter81)
                {
                  {
                    $output->writeMapBegin(TType::I32, TType::STRING, count($iter81));
                    {
                      foreach ($iter81 as $kiter82 => $viter83)
                      {
                        $xfer += $output->writeI32($kiter82);
                        $xfer += $output->writeString($viter83);
                      }
                    }
                    $output->writeMapEnd();
                  }
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProcessTaskExecutionStatus {
  static $_TSPEC;

  public $statusType = null;
  public $information = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statusType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'information',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['statusType'])) {
        $this->statusType = $vals['statusType'];
      }
      if (isset($vals['information'])) {
        $this->information = $vals['information'];
      }
    }
  }

  public function getName() {
    return 'ProcessTaskExecutionStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->statusType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->information);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProcessTaskExecutionStatus');
    if ($this->statusType !== null) {
      $xfer += $output->writeFieldBegin('statusType', TType::I32, 1);
      $xfer += $output->writeI32($this->statusType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->information !== null) {
      $xfer += $output->writeFieldBegin('information', TType::STRING, 2);
      $xfer += $output->writeString($this->information);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProcessTaskExecutionParameters {
  static $_TSPEC;

  public $processTaskId = null;
  public $development = null;
  public $delta = null;
  public $forceStart = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'processTaskId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'development',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'delta',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'forceStart',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['processTaskId'])) {
        $this->processTaskId = $vals['processTaskId'];
      }
      if (isset($vals['development'])) {
        $this->development = $vals['development'];
      }
      if (isset($vals['delta'])) {
        $this->delta = $vals['delta'];
      }
      if (isset($vals['forceStart'])) {
        $this->forceStart = $vals['forceStart'];
      }
    }
  }

  public function getName() {
    return 'ProcessTaskExecutionParameters';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->processTaskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->development);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->delta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->forceStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProcessTaskExecutionParameters');
    if ($this->processTaskId !== null) {
      $xfer += $output->writeFieldBegin('processTaskId', TType::STRING, 1);
      $xfer += $output->writeString($this->processTaskId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->development !== null) {
      $xfer += $output->writeFieldBegin('development', TType::BOOL, 2);
      $xfer += $output->writeBool($this->development);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delta !== null) {
      $xfer += $output->writeFieldBegin('delta', TType::BOOL, 3);
      $xfer += $output->writeBool($this->delta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forceStart !== null) {
      $xfer += $output->writeFieldBegin('forceStart', TType::BOOL, 4);
      $xfer += $output->writeBool($this->forceStart);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


